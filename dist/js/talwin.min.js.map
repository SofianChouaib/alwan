{"version":3,"file":"js/talwin.min.js","mappings":"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","sources":["webpack://Talwin/webpack/universalModuleDefinition","webpack://Talwin/webpack/bootstrap","webpack://Talwin/webpack/runtime/define property getters","webpack://Talwin/webpack/runtime/hasOwnProperty shorthand","webpack://Talwin/./src/js/constants.js","webpack://Talwin/./src/js/utils/object.js","webpack://Talwin/./src/js/utils/util.js","webpack://Talwin/./src/js/utils/dom.js","webpack://Talwin/./src/js/defaults.js","webpack://Talwin/./src/js/core/events/EventBinder.js","webpack://Talwin/./src/js/lib/scPop.js","webpack://Talwin/./src/js/lib/svg.js","webpack://Talwin/./src/js/lib/colors.js","webpack://Talwin/./src/js/lib/parser.js","webpack://Talwin/./src/js/core/index.js","webpack://Talwin/./src/js/components/Reference.js","webpack://Talwin/./src/js/components/App.js","webpack://Talwin/./src/js/components/Palette.js","webpack://Talwin/./src/js/components/Marker.js","webpack://Talwin/./src/js/components/Preview.js","webpack://Talwin/./src/js/components/Sliders.js","webpack://Talwin/./src/js/components/Inputs.js","webpack://Talwin/./src/js/components/Swatches.js","webpack://Talwin/./src/js/index.js","webpack://Talwin/./src/js/core/events/EventListener.js","webpack://Talwin/./src/js/core/color.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Talwin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Talwin\"] = factory();\n\telse\n\t\troot[\"Talwin\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","export const ROOT = document;\nexport const BODY = ROOT.body;\nexport const HTML = ROOT.documentElement;\n\nexport const BUTTON = 'button';\nexport const SVG = 'svg';\n\nexport const OPEN = 'open';\nexport const CLOSE = 'close';\nexport const COLOR = 'color';\nexport const CLICK = 'click';\nexport const MOUSE_DOWN = 'mousedown';\nexport const MOUSE_MOVE = 'mousemove';\nexport const MOUSE_UP = 'mouseup';\nexport const TOUCH_START = 'touchstart';\nexport const TOUCH_MOVE = 'touchmove';\nexport const TOUCH_END = 'touchend';\nexport const TOUCH_CANCEL = 'touchcancel';\nexport const SCROLL = 'scroll';\nexport const RESIZE = 'resize';\nexport const KEY_DOWN = 'keydown';\nexport const INPUT = 'input';\nexport const CHANGE = 'change';\nexport const MOUSE_LEAVE = 'mouseleave';\nexport const FOCUS_IN = 'focusin';\nexport const FOCUS_OUT = 'focusout';\n\nexport const HEX_FORMAT = 'hex';\nexport const RGB_FORMAT = 'rgb';\nexport const HSL_FORMAT = 'hsl';\nexport const HSV_FORMAT = 'hsv';\n\nexport const TAB = 'Tab';\nexport const ARROW_RIGHT = 'ArrowRight';\nexport const ARROW_LEFT = 'ArrowLeft';\nexport const ARROW_UP = 'ArrowUp';\nexport const ARROW_DOWN = 'ArrowDown';\nexport const ENTER = 'Enter';\nexport const ESCAPE = 'Escape';\n\nexport const FOCUS_CLASSNAME = 'tw-focus';\nexport const BUTTON_CLASSNAME = 'tw-btn';\n\nexport const COLOR_PROPERTY = 'tw-' + COLOR;\n\nexport const REMOVE_METHOD = 'remove';\nexport const ADD_METHOD = 'add';\n\n// Picker supported color formats.\nexport const COLOR_FORMATS = [HEX_FORMAT, RGB_FORMAT, HSL_FORMAT];\n\n\nexport const { max, min, round } = Math;\nexport const float = parseFloat;\nexport const int = parseInt;","/**\n * Iterate in an object, stop and return false if callback function returns true.\n *\n * @param {Object} object - Any object.\n * @param {CallableFunction} fn - Any Callback function.\n * @returns {Boolean}\n */\nexport const objectIterator = (object, fn) => {\n\n    for (const key in object) {\n        if (Object.hasOwnProperty.call(object, key)) {\n            if (fn(object[key], key, object)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n\n/**\n * Merges two or more objects together into the target object.\n *\n * @param {Object} target - Object that will receive the new properties.\n * @param  {...Object} sources - Objects containing additional properties to merge in.\n * @returns {Object}\n */\nexport const merge = (target, ...sources) => Object.assign(target, ...sources);\n\n/**\n * Checks if two object are equals.\n *\n * @param {Object} object1 - Any object.\n * @param {Object} object2 - Any object.\n * @returns {Boolean}\n */\nexport const isEqual = (object1, object2) => objectIterator(object1, (value, key) => !object2 || object2[key] !== value);\n","import { CHANGE, COLOR, max, min } from \"../constants\";\n\n/**\n * Checks if a value is a string.\n *\n * @param {Any} value - Value.\n * @returns {Boolean}\n */\nexport const isString = value => typeof value === 'string';\n\n/**\n * Checks if a value is not undefined or null.\n *\n * @param {Any} value - Value.\n * @returns {Boolean}\n */\nexport const isset = value => value != null;\n\n\n/**\n * Bounds a number between a lower bound and an upper bound.\n *\n * @param {number} number - Any number.\n * @param {number} upperBound - Max.\n * @param {number} lowerBound - Min.\n * @returns {number}\n */\nexport const boundNumber = (number, upperBound, lowerBound) => min(max(number, lowerBound || 0), upperBound || 100);\n\n\n/**\n * Sets color, if color state changes then trigger color and change events.\n *\n * @param {Object} talwin - Instance.\n * @param {String} color - Color.\n * @param {Element|Object} source - Event source.\n */\nexport const setColorAndTriggerEvents = (talwin, color, source) => {\n    if (talwin._clr.updateByString(color, true)) {\n        let emit = talwin._e.emit;\n        emit(COLOR, source);\n        emit(CHANGE, source);\n    }\n}","import { ADD_METHOD, BODY, BUTTON, INPUT, REMOVE_METHOD, ROOT, SCROLL, SVG } from \"../constants\";\nimport { objectIterator } from \"./object\";\nimport { isString } from \"./util\";\n\n/**\n * Gets a DOM element.\n *\n * @param {String|Element} ref - CSS selector or DOM element.\n * @param {Element} context - Element to search from.\n * @param {Boolean} all - Get all elements.\n * @returns {Element|null}\n */\nexport const getElement = (ref, context, all) =>\n    isString(ref) ? ref && (context || ROOT)['querySelector' + (all ? 'All' : '')](ref)\n        : ref instanceof Element ? ref\n        : null;\n\n/**\n * Creates a new HTML Element.\n *\n * @param {String}           tagName     - HTML Element's Tag name.\n * @param {String}           className   - HTML Element's class name.\n * @param {Element}          parent - Append the new created element to this element.\n * @param {Object}           data - New element data its attributes, content html or inner text.\n * @param {CallableFunction} callback - Callback.\n * @returns {Element}\n */\nexport const createElement = (tagName, className, parent, data, callback) => {\n\n    data = data || {}\n    const ns = `http://www.w3.org/${tagName === SVG ? '2000/svg' : '1999/xhtml'}`;\n    const element = document.createElementNS(ns, tagName || 'div');\n\n    if (className) {\n        element.className = className;\n    }\n\n    objectIterator(data, (value, key) => {\n        if (key === 'html') {\n            setElementsHTML(element, value);\n        } else if (key === 'text') {\n            element.innerText = value;\n        } else {\n            value && element.setAttributeNS('', key, value);\n        }\n    });\n\n    if (parent) {\n        parent.appendChild(element);\n    }\n\n    callback && callback(element);\n\n    return element;\n}\n\n\n/**\n * Gets element bounds.\n *\n * @param {HTMLElement} el Element.\n * @returns {Object}\n */\nexport const getBounds = (el) => el && el.getBoundingClientRect();\n\n\n/**\n * Gets an element's parent.\n *\n * @param {Element} el - Any html element.\n * @returns {Element}\n */\nexport const getParent = el => el.parentElement;\n\n\n/**\n * Replace a child node with another node.\n *\n * @param {Node} newChild - Any html node.\n * @param {Node} oldChild - Any html node.\n * @returns {Node}\n */\nexport const replaceElement = (newChild, oldChild) => getParent(oldChild).replaceChild(newChild, oldChild) && newChild;\n\n/**\n * Removes an element from the DOM.\n *\n * @param {HTMLElement} element - Any html node.\n * @param {Boolean} destroy - Remove Reference. \n * @returns {Element|null}\n */\nexport const removeElement = (element, destroy) => element && getParent(element).removeChild(element) && (destroy ? null : element);\n\n\n/**\n * Gets any scrollable ancestor of an element.\n * Document is always included.\n *\n * @param {HTMLElement} el - Subject element.\n * @returns {Array}\n */\nexport const getScrollableAncestors = el => {\n    el = getParent(el);\n  \n    let scrollableElements = [ROOT];\n  \n    while (el !== BODY) {\n      let overflow = getComputedStyle(el).overflow;\n      if (overflow === 'auto' || overflow === SCROLL) {\n        scrollableElements.push(el);\n      }\n      el = getParent(el);\n    }\n  \n    return scrollableElements;\n}\n\n\n/**\n * Check if an element is visible in the viewport of all scrollable elements.\n *\n * @param {HTMLElement} el - Any html element.\n * @param {Array} scrollableElements - scrollable elements.\n * @returns {boolean}\n */\nexport const isInViewport = (el, scrollableElements) =>\n    scrollableElements.every(scrollable => {\n        let isVisible = true;\n\n        if (scrollable !== ROOT) {\n            let {top: elTop, bottom: elBottom} = getBounds(el);\n            let {top: scrollableTop, bottom: scrollableBottom} = getBounds(scrollable);\n\n            isVisible = elTop >= scrollableTop && scrollableBottom >= elBottom;\n        }\n\n        return isVisible;\n    });\n\n\n/**\n * Sets a CSS custom property.\n *\n * @param {HTMLElement} el  - Element to set its custom property.\n * @param {string} property - Property name.\n * @param {string} value    - Property value.\n */\nexport const setCustomProperty = (el, property, value) => {\n    el && el.style.setProperty('--' + property, value);\n}\n\n/**\n * Gets the last focusable element in an element (context).\n *\n * @param {Element} context - Element which the last focusable elment is an ancestor.\n * @returns {Element}\n */\nexport const getLastFocusableElement = context => {\n    let focusableElements = getElement(BUTTON + ',' + INPUT, context, true);\n    return focusableElements[focusableElements.length - 1];\n}\n\n/**\n * Hides/Shows element.\n * Truthy value or non empty array shows the element,\n * else hides it.\n * \n * @param {Element} el - Element to show/hide.\n * @param {Array|Boolean} cond - Condition.\n */\nexport const setVisibility = (el, cond) => {\n\n    let length = cond && cond.length;\n\n    if (length != null) {\n        cond = length;\n    }\n\n    el.style.display = cond ? '' : 'none';\n}\n\n/**\n * Adds/Remove class based on a condition.\n *\n * @param {Element} el - Any Element.\n * @param {String} classname - CSS Class Selector.\n * @param {Boolean} cond - Condition.\n */\nexport const updateClass = (el, classname, cond) => {\n    classname && el.classList[cond ? ADD_METHOD : REMOVE_METHOD](classname);\n}\n\n/**\n * Sets element's inner html.\n *\n * @param {Element} el - Any Element.\n * @param {String} html - HTML string.\n */\nexport const setElementsHTML = (el, html) => {\n    el.innerHTML = html || '';\n}","/**\n * SC Picker default options.\n */\n export const defaults = {\n    // Set the container's (widget) id.\n    id: '',\n\n    // One or many classes separated by a white space,\n    // to add it to the preset button.\n    classname: '',\n\n    // Choose a theme, 'dark' or 'light'.\n    theme: 'light',\n\n    // Toggle picker's visibility (Show/Hide),\n    // Setting this to false keeps the picker visible.\n    toggle: true,\n\n    // Display the picker container as a pop-up (a box that floats on top of the page content),\n    // if it's false, picker container will be displayed as a block (embeded in the page's content).\n    popover: true,\n\n    // Set the position of the popper (if popover is set to true) relative to the reference element,\n    // the position has two values seperated by a dash (-),\n    // the first value is the direction (top, bottom, right, left),\n    // the second value is the alignment (start, center, end), omitting this value will default to center.\n    // e.g. 'bottom-start': 'bottom' places the picker below the reference element,\n    // and 'start' aligns the left side of the container with the left side of the reference element.\n    // Note: \n    // If the picker container has no space to be placed, it will auto-position itself.\n    // based on the available space.\n    position: 'bottom-start',\n\n    // Set the gap (in pixels) between the picker container and the reference element.\n    margin: 8,\n\n    // Replace the reference element with a pre-styled button.\n    preset: true,\n\n    // Initial color.\n    color: '#000',\n\n    // Default color.\n    default: '#000',\n\n    // Target can be a selector or an HTML element,\n    // If the option popover is true, the picker container will be positionned retalive to this element,\n    // instead of the reference element.\n    // else if popover option is false, the picker container will be appended as a child into this element.\n    target: '',\n\n    // Disable the picker, users won't be able to pick colors.\n    disabled: false,\n\n    // Initial color format.\n    format: 'rgb',\n\n    // For the formats 'hsl' and 'rgb', choose a single input to display the color string,\n    // or if false, display an input for each color channel.\n    singleInput: false,\n\n    // Choose color formats for the picker input, 'hsl', 'rgb' or 'hex',\n    // No input will be displayed if the array is empty.\n    inputs: {\n        rgb: true,\n        hex: true,\n        hsl: true,\n    },\n\n    // Support alpha channel and display opacity slider.\n    opacity: true,\n\n    // Preview the color.\n    preview: true,\n\n    // Add/Remove a copy button.\n    copy: true,\n\n    // Array of color strings, invalid color strings will default to rgb(0,0,0).\n    swatches: [],\n}","import { ADD_METHOD, REMOVE_METHOD } from \"../../constants\";\nimport { isString } from \"../../utils/util\";\n\n/**\n * Adds/Removes one or more event listeners to/from an element.\n *\n * @param {targetElement} targetElement - Event target element.\n * @param {Array} eventData - Event data (type, handler, options).\n * @param {String} method - Add or Remove event listener method.\n */\nexport const binder = (eventData, unbind) => {\n\n    let method = (unbind ? REMOVE_METHOD: ADD_METHOD) + 'EventListener';\n    let [targetElement, events, handler, options] = eventData;\n\n    // If its a single event then put it inside an array.\n    if (isString(events)) {\n        events = [events];\n    }\n\n    events.forEach(event => {\n        targetElement[method](event, handler, options);\n    });\n}\n\n/**\n * Binds events to an element and stores listener in an array.\n *\n * @param {Array} listeners - Event Listeners.\n * @param {targetElement} targetElement - Event Target.\n * @param {String|Array} events - Event type.\n * @param {CallableFunction} handler - Event handler.\n * @param {Object|Boolean} options - Event options.\n * @returns {Array}\n */\nexport const bindEvent = (listeners, targetElement, events, handler, options) => {\n\n    if (targetElement) {\n        options = options || false;\n        let eventData = [targetElement, events, handler, options];\n        binder(eventData);\n        listeners.push(eventData);\n    }\n\n    return listeners;\n}\n\n/**\n * Unbinds all listeners attach to an element and removes them from listeners array.\n *\n * @param {Array} listeners - Event listeners.\n * @param {targetElement} targetElement - Event Target.\n * @returns {Array}\n */\nexport const unbindEvent = (listeners, targetElement) =>\n    // Filter out listeners attached to this TargetElement.\n    listeners.filter(eventData => \n        targetElement === eventData[0] ? \n            binder(eventData, true)\n            : true\n    );","import { BODY, HTML, max } from \"../constants\";\nimport { getBounds } from \"../utils/dom\";\n\nconst TOP = 1;\nconst RIGHT = 2;\nconst BOTTOM = 3;\nconst LEFT = 4;\nconst START = 5;\nconst CENTER = 6;\nconst END = 7;\n\nconst sides = {\n    top: TOP,\n    right: RIGHT,\n    bottom: BOTTOM,\n    left: LEFT,\n};\n\nconst alignments = {\n    start: START,\n    center: CENTER,\n    end: END,\n};\n\n\n/**\n * Sets popover's position relative to an element.\n *\n * @param {HTMLElement} ref     - Reference element.\n * @param {HTMLElement} pop     - Popper element.\n * @param {Object}      options - Options.\n * @returns {Object}\n */\nexport const scPop = (ref, pop, options) => {\n    /**\n     * SC Pop options.\n     */\n    options = options || {};\n\n    /**\n     * Reference element width.\n     */\n    let refWidth;\n\n    /**\n     * Reference element height.\n     */\n    let refHeight;\n\n    /**\n     * Reference element Left,\n     * X coordinate.\n     */\n    let refLeft;\n\n    /**\n     * Reference element Top,\n     * Y coordinate.\n     */\n    let refTop;\n\n    /**\n     * Reference element Bottom,\n     * Y coordinate + height.\n     */\n    let refBottom;\n\n    /**\n     * Reference element Right,\n     * X coordinate + width.\n     */\n    let refRight;\n\n    /**\n     * Reference element horizontal center,\n     * X coordinate + width / 2.\n     */\n    let refCenterX;\n\n    /**\n     * Reference element vertical center,\n     * Y coordinate + height / 2.\n     */\n    let refCenterY;\n\n    /**\n     * Pop element width.\n     */\n    let popWidth;\n\n    /**\n     * Pop element height.\n     */\n    let popHeight;\n\n    /**\n     * Pop element width with margin.\n     */\n    let popOffsetWidth;\n\n    /**\n     * Pop element height with margin.\n     */\n    let popOffsetHeight;\n\n    /**\n     * Document height.\n     */\n    let docHeight;\n\n    /**\n     * Document width.\n     */\n    let docWidth;\n\n    /**\n     * Pop margin.\n     */\n    let margin = parseFloat(options.margin) || 4;\n\n    /**\n     * Pop position.\n     */\n    let position = options.position ? options.position.split(\"-\") : [];\n\n    /**\n     * Pop position side.\n     */\n    let side = sides[position[0]] || BOTTOM;\n\n    /**\n     * Pop position alignment.\n     */\n    let alignment = position[1] ? alignments[position[1]] || START : CENTER;\n\n    /**\n     * Pop Y coordinate.\n     */\n    let popTop = 0;\n\n    /**\n     * Pop X coordinate.\n     */\n    let popLeft = 0;\n\n    /**\n     * Pop inline CSS object.\n     */\n    let popStyle = pop.style;\n\n    /**\n     * Check if space is available for positioning the pop on the one of the 4 sides.\n     *\n     * @param {Number} side - Position side.\n     * @returns {boolean}\n     */\n    const hasSpaceForSides = side => side === TOP && refTop >= popOffsetHeight ||\n        side === BOTTOM && docHeight - refBottom >= popOffsetHeight ||\n        side === RIGHT && docWidth - refRight >= popOffsetWidth ||\n        side === LEFT && refLeft >= popOffsetWidth;\n\n    /**\n     * Check if space is available for aligning the pop element.\n     *\n     * @param {Number} alignment - Position alignment.\n     * @param {boolean} isVertical - Pop is on the Top side or the Bottom side.\n     * @returns {boolean}\n     */\n    const hasSpaceForAlignment = (alignment, isVertical) => alignment === START ? isVertical ? docWidth - refLeft >= popWidth : docHeight - refTop >= popHeight\n        : alignment === CENTER ? isVertical ? 2 * (docWidth - refCenterX) >= popWidth && refCenterX * 2 >= popWidth : 2 * (docHeight - refCenterY) >= popHeight && refCenterY * 2 >= popHeight\n            : isVertical ? refRight >= popWidth : refBottom >= popHeight;\n\n    /**\n     * Place the pop in one of the 4 sides.\n     *\n     * @param {Number} side - Position side.\n     */\n    const setSide = side => {\n        popTop = side === TOP ? refTop - popOffsetHeight : side === BOTTOM ? refBottom + margin : 0;\n        popLeft = side === RIGHT ? refRight + margin : side === LEFT ? refLeft - popOffsetWidth : 0;\n    }\n\n\n\n    /**\n     * Place the pop in one of the 3 alignments.\n     *\n     * @param {Number} alignment - Position alignment.\n     * @param {boolean} isVertical - Pop is on the Top side or the Bottom side.\n     */\n    const setAlignment = (alignment, isVertical) => {\n        if (alignment === START) {\n            isVertical ? popLeft = refLeft : popTop = refTop;\n        } else if (alignment === CENTER) {\n            isVertical ? popLeft = refLeft - popWidth / 2 + refWidth / 2 : popTop = refTop - popHeight / 2 + refHeight / 2;\n        } else {\n            isVertical ? popLeft = refRight - popWidth : popTop = refBottom - popHeight;\n        }\n    }\n\n    /**\n     * Center the pop element vertically to the screen.\n     */\n    const centerPopVertically = () => (docHeight - popHeight) / 2;\n\n    /**\n     * Center the pop element horizontally to the screen.\n     */\n    const centerPopHorizontally = () => (docWidth - popWidth) / 2;\n\n    /**\n     * Fallback positions order.\n     */\n    const fallbacksPositions = {\n        /**\n         * Sides to fallback to.\n         */\n        [TOP]: [TOP, BOTTOM, RIGHT, LEFT],\n        [BOTTOM]: [BOTTOM, TOP, RIGHT, LEFT],\n        [RIGHT]: [RIGHT, LEFT, TOP, BOTTOM],\n        [LEFT]: [LEFT, RIGHT, TOP, BOTTOM],\n        /**\n         * Alignments to fallback to.\n         */\n        [START]: [START, CENTER, END],\n        [CENTER]: [CENTER, START, END],\n        [END]: [END, CENTER, START],\n    };\n\n    /**\n     * Position the pop element.\n     */\n    const setPosition = () => {\n\n        ({\n            width: refWidth,\n            height: refHeight,\n            top: refTop,\n            right: refRight,\n            bottom: refBottom,\n            left: refLeft,\n        } = getBounds(ref));\n\n        // Cash the ref center coordinates.\n        refCenterX = refLeft + refWidth / 2;\n        refCenterY = refTop + refHeight / 2;\n\n        // Pop bounds.\n        ({ width: popWidth, height: popHeight } = getBounds(pop));\n\n        popOffsetWidth = popWidth + margin;\n        popOffsetHeight = popHeight + margin;\n\n        // Document dimensions.\n        let docBounds = getBounds(HTML);\n        docWidth = docBounds.width;\n        docHeight = max(HTML.clientHeight, docBounds.height, getBounds(BODY).height);\n\n        // Reference sides to use.\n        let sidesArray = fallbacksPositions[side],\n            positionSide,\n            sideIsSet = false,\n            alignmentIsSet = false;\n\n        let i = 0;\n        while (i < sidesArray.length && !sideIsSet) {\n            positionSide = sidesArray[i];\n\n            if (hasSpaceForSides(positionSide)) {\n                // Set the position.\n                setSide(positionSide);\n                sideIsSet = true;\n            }\n\n            i++;\n        }\n\n        // The pop is successfully placed in one of the 4 sides.\n        if (sideIsSet) {\n            let alignmentsArray = fallbacksPositions[alignment];\n            let isVertical = positionSide === TOP || positionSide === BOTTOM;\n            let j = 0;\n            // Check the alignments.\n            while (j < alignmentsArray.length && !alignmentIsSet) {\n                const positionAlignment = alignmentsArray[j];\n\n                if (hasSpaceForAlignment(positionAlignment, isVertical)) {\n                    // Set the alignment position.\n                    setAlignment(positionAlignment, isVertical);\n                    alignmentIsSet = true;\n                }\n\n                j++;\n            }\n\n            // Center the element to the screen if all alignments fail.\n            if (!alignmentIsSet) {\n                isVertical ? popLeft = centerPopHorizontally() : popTop = centerPopVertically();\n            }\n        } else {\n            // Pop has no space to fit in in all 4 sides.\n            // Center the pop vertically and horizontally to the screen.\n            popTop = centerPopVertically();\n            popLeft = centerPopHorizontally();\n        }\n\n        popStyle.top = popTop + 'px';\n        popStyle.left = popLeft +'px';\n    }\n\n    setPosition();\n\n    return {\n        update: setPosition\n    }\n}","import { merge } from \"../utils/object\";\n\n/**\n * SVG attributes that are static for all SVGs.\n */\nconst staticAttrs = {\n    'aria-role': 'none',\n    focusable: 'false'\n}\n\nconst clipboardSVG = '<path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path>';\nconst checkSVG = '<path d=\"M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z\"></path>';\nconst switchSVG = '<path d=\"M10 1L5 8h10l-5-7zm0 18l5-7H5l5 7z\"></path>';\n\n/**\n * Gets SVG attributes object.\n *\n * @param {String} width - SVG Width.\n * @param {String} height - SVG Height.\n * @param {String} viewBox - SVG ViewBox.\n * @param {String} content - SVG Content.\n * @returns {Object}\n */\nconst svgAttrs = (width, height, viewBox, content) => ({ width, height, viewBox, content });\n\n\nexport const clipboardSVGAttrs = merge(svgAttrs('18', '18', '0 0 24 24', clipboardSVG), staticAttrs);\nexport const checkSVGAttrs = merge(svgAttrs('18', '18', '0 0 24 24', checkSVG), staticAttrs);\nexport const switchSVGAttrs = merge(svgAttrs('15', '15', '0 0 20 20', switchSVG), staticAttrs);","import { HSL_FORMAT, int, max, min, round } from \"../constants\";\nimport { isString } from \"../utils/util\";\n\n/**\n * Convert HSV to RGB.\n *\n * @param {Object} hsv - HSV color object.\n * @returns {Object}\n */\nexport const HSVToRGB = hsv => {\n\n    let H = hsv.h / 60,\n        S = hsv.s,\n        V = hsv.v;\n\n    /**\n     * Helper function used for converting HSV to RGB.\n     *\n     * @param {Number} k - Positive Coefficient.\n     * @param {Number} s - hSV Saturation.\n     * @param {Number} v - HSV Value.\n     * @returns {Number}\n     */\n    let fn = (k, s, v) => (v - v * s * max(0, min(k, 4 - k, 1))) * 255;\n\n    return {\n        r: round(fn((5 + H) % 6, S, V)),\n        g: round(fn((3 + H) % 6, S, V)),\n        b: round(fn((1 + H) % 6, S, V)),\n        a: hsv.a\n    }\n}\n\n\n/**\n * Convert RGB or HSL color objects to string.\n *\n * @param {Object} color  - Color Object.\n * @param {string} format - Color format.\n * @returns {string}\n */\nexport const toString = (color, format) => {\n\n    let colorString = color;\n\n\tif (! isString(color)) {\n\n        let a = '',\n            opacity = '',\n            comma = ', ';\n    \n        if (color.a < 1) {\n            a = 'a';\n            opacity = comma + color.a;\n        }\n\n        let percent = format === HSL_FORMAT ? '%' : '';\n\t\tcolorString = format + a + '(' + color[format[0]] + comma + color[format[1]] + percent + comma + color[format[2]] + percent + opacity + ')';\n\t}\n\n    return colorString;\n}\n\n/**\n * Converts hex color string to RGB color object.\n *\n * @param {string} hexColor - Hexadecimal color string.\n * @returns {Object}\n */\nexport const HEXToRGB = hexColor => ({\n    r: int(hexColor.slice(1, 3), 16),\n    g: int(hexColor.slice(3, 5), 16),\n    b: int(hexColor.slice(5, 7), 16),\n    a: 1\n});\n\n\n/**\n * Converts a decimal number to hexadecimal number.\n * The result must be two digits.\n *\n * @param {Number} number Decimal number.\n * @returns {string}\n */\nconst toHex = number => {\n\tlet hexNumber = number.toString(16);\n\treturn hexNumber.length < 2 ? '0' + hexNumber : hexNumber;\n}\n\n\n/**\n * Converts RGB color object to Hex string color.\n *\n * @param {Object} rgb - RGB color object.\n * @returns {String}\n */\nexport const RGBToHEX = ({ r, g, b, a }) => '#' + toHex(r) + toHex(g) + toHex(b) + (a < 1 ? toHex(round(a * 255)) : '');\n\n\n/**\n * Converts HSV to HSL.\n *\n * @param {Object} hsv - HSV color object.\n * @returns {Object}\n */\nexport const HSVToHSL = (hsv, percentage) => {\n\n    percentage = percentage ? '%' : 0;\n\n    let v = hsv.v;\n    let l = v * (1 - hsv.s / 2);\n    let s = ! l || l === 1 ? 0 : (v - l) / min(l, 1 - l);\n\n    return {\n        h: hsv.h,\n        s: round(s * 100) + percentage,\n        l: round(l * 100) + percentage,\n        a: round(hsv.a * 100) / 100\n    }\n}\n\n/**\n * Converts HSL to HSV.\n *\n * @param {Object} hsl - HSL color object.\n * @returns {Object}\n */\nexport const HSLToHSV = (hsl) => {\n\tlet s = hsl.s / 100,\n\t\tl = hsl.l / 100,\n\t\tv = l + s * min(l, 1 - l);\n\t\n\treturn {\n\t\th: hsl.h,\n\t\ts: v ? 2 * (1 - l / v) : 0,\n\t\tv,\n\t\ta: hsl.a\n\t}\n}\n\n\n/**\n * Converts RGB to HSV.\n *\n * @param {Object} rgb - RGB color object.\n * @returns {Object}\n */\nexport const RGBToHSV = rgb => {\n\tlet R = rgb.r / 255,\n\t\tG = rgb.g / 255,\n\t\tB = rgb.b / 255,\n\t\tCmax = max(R, G, B),\n\t\tCmin = min(R, G, B),\n\t\trange = Cmax - Cmin,\n\t\tsaturation = Cmax === 0 ? 0 : range / Cmax,\n\t\thue = range === 0 ? 0\n            : Cmax === R ? ((G - B) / range) % 6\n            : Cmax === G ? ((B - R) / range) + 2\n            : Cmax === B ? ((R - G) / range) + 4\n            : 0;\n\n\treturn {\n\t\th: round( ( 360 + hue * 60 ) % 360 ),\n\t\ts: saturation,\n\t\tv: Cmax,\n\t\ta: round( rgb.a * 100 ) / 100\n\t}\n}","import { float, HSL_FORMAT, RGB_FORMAT, round } from \"../constants\";\nimport { createElement } from \"../utils/dom\";\nimport { boundNumber } from \"../utils/util\";\nimport { HEXToRGB, toString } from \"./colors\";\n\nconst ctx = createElement('canvas').getContext('2d');\nconst HSL_REGEX = /^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(\\w*)?(?:(?:\\s+([+-]?\\d*\\.?\\d+)%\\s*([+-]?\\d*\\.?\\d+)%(?:\\s*\\/\\s*([+-]?\\d*\\.?\\d+%?))?)|(?:\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%(?:\\s*,\\s*([+-]?\\d*\\.?\\d+%?))?))\\s*\\)?$/i;\nconst HEX_REGEX = /^#[0-9a-f]{6}$/i;\n\n\n/**\n * Parses a color string.\n *\n * @param {String} colorString - Color string.\n * @param {Boolean} asString - Return color as a string or object.\n * @returns {Object}\n */\nexport const parseColor = (colorString, asString) => {\n\n    let color;\n    let format;\n\n    colorString = colorString.trim();\n    /**\n     * Parse hsl.\n     * No need to parse it if it's shorter than the minimum hsl string length,\n     * the minimum is 10 characters, e.g. hsl(0 0%0%.\n     */\n    if (colorString.length >= 10) {\n\n        const channels = colorString.match(HSL_REGEX);\n\n        if (channels) {\n            let h = float(channels[1]),\n                angle = channels[2],\n                s = boundNumber(channels[3] || channels[6]),\n                l = boundNumber(channels[4] || channels[7]),\n                a = channels[5] || channels[8];\n\n            /**\n             * The hue value is so often given in degrees, it can be given as a number, however\n             * it might has a unit 'turn', 'rad' (radians) or 'grad' (gradians),\n             * If the hue has a unit other than deg, then convert it to degrees.\n             */\n            h *= angle === 'turn' ? 360\n                : angle === 'rad' ? 180 / PI\n                : angle === 'grad' ? 0.9\n                : 1;\n\n            // Make sure hue is between 0 and 360.\n            let maxAngle = 360;\n            h = (round(h) % maxAngle + maxAngle) % maxAngle;\n\n            // Alpha value must be between 0 and 1.\n            a = a ? boundNumber(a.slice(-1) === '%' ? float(a) / 100 : a, 1) : 1;\n\n            color  = { h, s, l, a };\n            format = HSL_FORMAT;\n        }\n    }\n\n\t// colorString is not an HSL string.\n\tif (! color) {\n\n\t\tctx.fillStyle = '#000';\n\t\tctx.fillStyle = colorString;\n\t\tcolorString = ctx.fillStyle;\n\t\t// ColorString is either hex or rgb string,\n\t\t// if it's hex convert it to rgb object,\n\t\t// if it's rgb then parse it to object.\n\t\tif (HEX_REGEX.test(colorString)) {\n\t\t\tcolor = HEXToRGB(colorString);\n\t\t} else {\n            // Parse RGB string.\n            let [r, g, b, a] = colorString.match(/\\((.+)\\)/)[1]\n                                          .split(',')\n                                          .map(value => float(value));\n\n            color = {\n                r,\n                g,\n                b,\n                a: a ? round(a * 100) / 100 : 1,\n            }\n        }\n\n        format = RGB_FORMAT;\n    }\n\n    return asString ? toString(color, format) : { c: color, f: format };\n}","import { App } from \"../components/App\";\nimport { Inputs } from \"../components/Inputs\";\nimport { Palette } from \"../components/Palette\";\nimport { Preview } from \"../components/Preview\";\nimport { Reference } from \"../components/Reference\";\nimport { Sliders } from \"../components/Sliders\";\nimport { Swatches } from \"../components/Swatches\";\nimport { createElement } from \"../utils/dom\";\nimport { merge, objectIterator } from \"../utils/object\";\nimport { setColorAndTriggerEvents } from \"../utils/util\";\n\n\nconst CONTAINER_CLASSNAME = 'talwin__container';\n\n/**\n * Create and initialize components.\n *\n * @param {Element} reference - Picker Reference element.\n * @param {Object} talwin - Talwin Instance.\n * @returns {Object}\n */\nexport const createComponents = (reference, talwin) => {\n\n    /**\n     * Creates a container element.\n     *\n     * @param {HTMLElement} parent - Element to append the created container to.\n     * @returns {HTMLElement}\n     */\n    const createContainer = (parent) => createElement('', CONTAINER_CLASSNAME, parent);\n\n\n    let ref = Reference(reference, talwin);\n    let app = App(talwin);\n\n    let root = app.$;\n\n    let palette = Palette(root, talwin);\n\n    let container = createContainer(root);\n    \n    let preview = Preview(container, talwin);\n    let sliders = Sliders(container, talwin);\n    let inputs = Inputs(createContainer(root), talwin);\n    let swatches = Swatches(root, talwin);\n\n    return {\n        ref,\n        app,\n        palette,\n        preview,\n        sliders,\n        inputs,\n        swatches\n    }\n}\n\n/**\n * Initialize components.\n *\n * @param {Object} talwin - Instance.\n * @param {Object} options - Talwin options.\n */\nexport const initialize = (talwin, options) => {\n\n    options = options || {};\n\n    let config = talwin.config;\n    let color = options.color;\n\n    merge(config, options);\n\n    objectIterator(talwin._ui, component => {\n        let init = component.init;\n\n        if (init) {\n            init(config);\n        }\n    });\n\n    /**\n     * Initialize color.\n     */\n    if (color) {\n        setColorAndTriggerEvents(talwin, color);\n    }\n}","import { BUTTON, CLICK } from \"../constants\";\nimport { bindEvent, unbindEvent } from \"../core/events/EventBinder\";\nimport { createElement, replaceElement, setVisibility, updateClass } from \"../utils/dom\";\n\n\nconst PRESET_BUTTON_CLASSNAME = 'tw-ref';\n\n/**\n * Creates a Reference component.\n *\n * @param {Element} originalRef - User Reference Element.\n * @returns {Object}\n */\nexport const Reference = (originalRef, talwin) => {\n\n    /**\n     * Reference API.\n     */\n    const self = {\n        $: originalRef,\n        /**\n         * Reference Events.\n         */\n        e: [],\n        /**\n         * Sets/Unsets the pre-styled button.\n         *\n         * @param {Object} options - Picker options.\n         */\n        init(options) {\n            let { preset, classname } = options;\n            let { $: ref, e: events } = self;\n\n            events = unbindEvent(events, ref);\n            \n            if (preset !== (ref !== originalRef)) {\n                ref = preset ?\n                        // Replace the user provided reference element with a preset button.\n                        replaceElement( createElement(BUTTON, PRESET_BUTTON_CLASSNAME, null, { type: BUTTON, id: originalRef.id }), originalRef)\n                        // Set back user reference element.\n                        : replaceElement(originalRef, ref);\n            }\n\n            // Add classes in the reference element.\n            if (classname) {\n                classname.split(/\\s+/).map(cls => { updateClass(ref, cls, true) });\n            }\n\n            // Add click event to reference.\n            bindEvent(events, ref, CLICK, togglePicker);\n            self.$ = ref;\n            self.e = events;\n        }\n    }\n\n    /**\n     * Toggle picker.\n     *\n     * @param {Event} e - Click.\n     */\n    const togglePicker = e => {\n        talwin.toggle();\n    }\n\n    return self;\n}","import { BODY, CLOSE, ESCAPE, KEY_DOWN, MOUSE_DOWN, OPEN, RESIZE, ROOT, SCROLL, TAB } from \"../constants\";\nimport { bindEvent, unbindEvent } from \"../core/events/EventBinder\";\nimport { scPop } from \"../lib/scPop\";\nimport { createElement, getElement, getLastFocusableElement, getScrollableAncestors, isInViewport, setVisibility, updateClass } from \"../utils/dom\";\nimport { merge } from \"../utils/object\";\n/**\n * App component constants.\n */\nconst TALWIN_CLASSNAME = 'talwin';\nconst POPPER_CLASSNAME = 'tw-popper';\nconst DISABLED_CLASSNAME = 'tw-disabled';\n\n\n/**\n * App component.\n *\n * @param {Object} talwin - Talwin Instance.\n * @returns {Object}\n */\nexport const App = (talwin) => {\n\n    let { config, _e: { emit }, _clr: colorState } = talwin;\n\n    /**\n     * Top container.\n     *\n     * @type {HTMLElement}\n     */\n    let root = createElement('', TALWIN_CLASSNAME, BODY);\n\n    /**\n     * App API.\n     */\n    let self = {\n        e: []\n    }\n\n    /**\n     * Picker visibility state.\n     */\n    let _isOpen = false;\n\n    /**\n     * Reference element scrollable ancestors.\n     *\n     * @type {Array<Element>}\n     */\n    let scrollableAncestors = [];\n\n    /**\n     * Popper object.\n     *\n     * @type {Object}\n     */\n    let popper;\n\n    /**\n     * Initializes app component.\n     *\n     * @param {Object} options - Talwin options.\n     */\n    const init = (options) => {\n        let { theme, popover, target, position, margin, disabled, id, toggle } = options;\n        let refElement = talwin._ui.ref.$;\n        let targetElement = getElement(target);\n        let targetReference = targetElement || refElement;\n\n        if (id) {\n            root.id = id;\n        }\n        // Remove all popper events.\n        popperEvents(unbindEvent);\n\n        /**\n         * Set disable.\n         */\n        disable(disabled);\n\n        /**\n         * Set Theme.\n         */\n        root.dataset.theme = theme;\n\n        // Toggle option is false, picker is always open.\n        if (! toggle) {\n            open(true);\n        }\n\n        // Hide reference if both popover and toggle are false.\n        setVisibility(refElement, popover || toggle);\n\n        /**\n         * Set Popper.\n         */\n        if (popover) {\n            self.popper = popper = scPop(targetReference, root, {\n                position,\n                margin\n            });\n            // If reference element inside a nested scrollable elements,\n            // get all those scrollable elements in an array.\n            scrollableAncestors = getScrollableAncestors(refElement);\n\n            // Attach scroll event to all scrollable ancestors of the reference element,\n            // in order to update the popper's position.\n            // On window resize reposition the popper.\n            popperEvents(bindEvent);\n        } else {\n            targetReference.insertAdjacentElement( (targetElement ? 'before' : 'after') + 'end', root);\n        }\n        // If it's popover then the method will be 'add', if it's not,\n        // then the method will be 'remove'.\n        updateClass(root, POPPER_CLASSNAME, popover);\n    }\n\n\n    /**\n     * Update popper's position.\n     *\n     * @param {Event} e - Scroll or Resize event.\n     */\n    const updatePopper = e => {\n        if (_isOpen) {\n            reposition();\n\n            // Close picker if the reference element is not visible in the viewport,\n            // of nested scrollable elements.\n            if (! isInViewport(talwin._ui.ref.$, scrollableAncestors)) {\n                close(true);\n            }\n        }\n    }\n\n    /**\n     * Binds/Unbinds events for updating the popper's position.\n     *\n     * @param {Function} eventBinder - Bind/Unbind events.\n     */\n    const popperEvents = (eventBinder) => {\n        let listeners = self.e;\n\n        scrollableAncestors.forEach(scrollable => {\n            listeners = eventBinder(listeners, scrollable, SCROLL, updatePopper);\n        });\n\n        // On window resize reposition the popper.\n        listeners = eventBinder(listeners, window, RESIZE, updatePopper);\n        listeners = eventBinder(listeners, ROOT, [MOUSE_DOWN, KEY_DOWN], handlesAccessibility);\n\n        self.e = listeners;\n    }\n\n    /**\n     * Hanldes accessibility.\n     * \n     * If picker is displayed as a popover,\n     * send focus from reference element to the picker and vice versa,\n     * close picker on Escape key press or click away from the picker or the reference element.\n     *\n     * @param {Event}\n     */\n    const handlesAccessibility = e => {\n\n        if (_isOpen) {\n\n            let { target, type, key, shiftKey } = e;\n            let components = talwin._ui;\n            let refElement = components.ref.$;\n            let palette = components.palette.$;\n            let elementToFocus;\n            // Clicking outside the picker or pressing Escape key, results in,\n            // closing the picker.\n            if (key === ESCAPE || (type === MOUSE_DOWN && refElement !== target && ! root.contains(target))) {\n                close();\n            } else if (key === TAB) {\n                // Pressing Tab on reference element sends focus to the picker palette.\n                if (target === refElement && !shiftKey) {\n                    elementToFocus = palette;\n                // If picker is displayed as a popover,\n                // Pressing Tab + shift on the palette,\n                // or pressing Tab on the last focusable element in the picker,\n                // sends the focus back to the reference element.\n                } else if ((! shiftKey && target === getLastFocusableElement(root)) || (target === palette && shiftKey)) {\n                    elementToFocus = refElement;\n                }\n\n                if (elementToFocus) {\n                    e.preventDefault();\n                    elementToFocus.focus();\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Repositions the popper.\n     */\n    const reposition = () => {\n        popper && popper.update();\n    }\n\n\n    /**\n     * Opens the color picker.\n     *\n     * @param {Boolean} silent - Whether to trigger the open event or not.\n     */\n    const open = (silent) => {\n        if (! _isOpen && ! config.disabled) {\n            // Update inputs.\n            colorState.update({}, true);\n            reposition();\n            // Add open class.\n            updateClass(root, OPEN, true);\n            _isOpen = true;\n            ! silent && emit(OPEN);\n        }\n    }\n\n    /**\n     * Closes the color picker.\n     *\n     * @param {Boolean} silent - Whether to trigger the close event or not.\n     */\n    const close = (silent) => {\n        if (_isOpen && config.toggle) {\n            // Remove open class.\n            updateClass(root, OPEN, false);\n            _isOpen = false;\n            ! silent && emit(CLOSE);\n        }\n    }\n\n    /**\n     * Toggles (opens/closes) the color picker.\n     */\n    const toggle = () => {\n        _isOpen ? close() : open();\n    }\n\n    /**\n     * Gets the state of the picker, opened or closed.\n     *\n     * @returns {Boolean}\n     */\n    const isOpen = () => _isOpen;\n\n    /**\n     * Disable/Enable Picker.\n     *\n     * @param {Boolean} state - Picker state disabled (true) or enabled (false).\n     */\n    const disable = state => {\n        config.disabled = state;\n        state && close(true);\n        // Add/Remove disable class.\n        updateClass(talwin._ui.ref.$, DISABLED_CLASSNAME, state);\n    }\n\n    return merge(self, {\n        $: root,\n        init,\n        isOpen,\n        open,\n        close,\n        toggle,\n        disable,\n        reposition,\n    });\n}\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP, COLOR, FOCUS_CLASSNAME, FOCUS_IN, FOCUS_OUT, KEY_DOWN, MOUSE_DOWN, MOUSE_MOVE, MOUSE_UP, ROOT, TOUCH_CANCEL, TOUCH_END, TOUCH_MOVE, TOUCH_START } from \"../constants\";\nimport { bindEvent } from \"../core/events/EventBinder\";\nimport { createElement, getBounds, setVisibility, updateClass } from \"../utils/dom\"\nimport { Marker } from \"./Marker\";\n\n/**\n * Palette component constants.\n */\nconst PALETTE_CLASSNAME = 'talwin__palette';\nconst OVERLAY_CLASSNAME = 'tw-overlay';\n\n/**\n * Picker palette.\n *\n * @param {Element} parent - Element to append the palette element to.\n * @param {Object} talwin - Talwin instance.\n * @returns {Object}\n */\nexport const Palette = (parent, talwin) => {\n\n    const { _clr: colorState, _e: { emit }} = talwin;\n\n    /**\n     * Palette element.\n     */\n    const el = createElement('', PALETTE_CLASSNAME, parent, { tabindex: '0' });\n\n    /**\n     * Overlay element, used to set focus only on palette,\n     * if marker is moving.\n     */\n    const overlay = createElement('', OVERLAY_CLASSNAME, parent);\n    setVisibility(overlay, false);\n\n    /**\n     * Move marker one step horizontally using the keyboard.\n     */\n    const moveX = {\n        [ARROW_RIGHT]: 1,\n        [ARROW_LEFT]: -1\n    }\n\n    /**\n     * Move marker one step vertically using the keyboard.\n     */\n    const moveY = {\n        [ARROW_UP]: -1,\n        [ARROW_DOWN]: 1\n    }\n\n    /**\n     * Marker component.\n     */\n    const marker = Marker(el);\n\n    /**\n     * Marker Methods.\n     */\n    let { moveTo, point } = marker;\n\n    /**\n     * Palette dimensions\n     */\n    let WIDTH, HEIGHT;\n\n    /**\n     * Palette event listeners.\n     */\n    let listeners = [];\n\n    /**\n     * Palette bounds.\n     */\n    let bounds;\n\n    /**\n     * State of the marker.\n     */\n    let isDragging = false;\n\n    /**\n     * Marker start moving.\n     *\n     * @param {Event} e - Mousedown or Touchstart events.\n     * @returns {void}\n     */\n    const dragStart = e => {\n        if (e.touches && e.touches.length > 1) {\n            return;\n        }\n        // Save color state.\n        colorState.start();\n        // Cache palette's bounds.\n        bounds = getBounds(el);\n        updateDimensions(bounds);\n        moveAndUpdateColor(e);\n        isDragging = true;\n        // Display overlay.\n        setVisibility(overlay, isDragging);\n        el.focus();\n    }\n\n    /**\n     * Moves the marker.\n     *\n     * @param {Event} e - Mousemove or Touchmove event.\n     * @returns {void}\n     */\n    const dragMove = e => {\n        if (!isDragging || (e.touches && e.touches.length > 1)) {\n            return;\n        }\n        moveAndUpdateColor(e);\n    }\n\n\n    /**\n     * Marker stop moving.\n     *\n     * @param {Event} e - Mouseup or Touchend or touchcancel events.\n     */\n    const dragEnd = e => {\n        if (isDragging) {\n            // Trigger change event if color changes.\n            colorState.end(el);\n            isDragging = false;\n            // Hide overlay.\n            setVisibility(overlay, isDragging);\n        }\n    }\n\n\n    /**\n     * Updates color and moves marker.\n     *\n     * @param {Number} x - X coordinate.\n     * @param {Number} y - Y coordinate.\n     */\n    const updateColor = (x, y) => {\n        moveTo(x, y);\n        colorState.update({ s: x / WIDTH, v: 1 - y / HEIGHT });\n        emit(COLOR, el);\n    }\n\n\n    /**\n     * Moves Marker and Updates color.\n     *\n     * @param {Event} e - Drag start or drag move events.\n     */\n    const moveAndUpdateColor = e => {\n        let { top, left } = bounds;\n        let x, y;\n        let touches = e.touches;\n\n        e.preventDefault();\n\n        if (touches) {\n            e = touches[0];\n        }\n\n        // Calculate the local coordinates,\n        // local to the palette.\n        x = e.clientX - left;\n        y = e.clientY - top;\n\n        // Make sure x and y don't go out of bounds.\n        x = x < 0 ? 0 : x > WIDTH ? WIDTH : x;\n        y = y < 0 ? 0 : y > HEIGHT ? HEIGHT : y;\n\n        updateColor(x, y);\n    }\n\n    /**\n     * Updates palette.\n     *\n     * @param {Object} hsv - HSV color object.\n     */\n    const update = hsv => {\n        updateDimensions();\n        moveTo(hsv.s * WIDTH, (1 - hsv.v) * HEIGHT);\n    }\n\n    /**\n     * Handles palette's focus.\n     *\n     * @param {Event} e - Focusout or Focusin.\n     */\n    const handleFocus = e => {\n        // Update class condition removes class if its false,\n        // add class if true.\n        let cond = false;\n        // If palette lose focus, remove the focus class,\n        // and remove browser keyboard focus.\n        if (e.type === FOCUS_OUT) {\n            el.blur();\n        } else {\n            cond = ! isDragging;\n        }\n\n        updateClass(el, FOCUS_CLASSNAME, cond);\n    }\n\n    /**\n     * Handles picking color using keyboard.\n     *\n     * @param {Event} e - Keydown.\n     */\n    const handleKeyboard = e => {\n\n        // Add focus class.\n        updateClass(el, FOCUS_CLASSNAME, true);\n\n        let key = e.key;\n\n        if (moveX[key] || moveY[key]) {\n            e.preventDefault();\n\n            updateDimensions();\n\n            let {x, y} = point();\n            let markerX = x, markerY = y;\n            // Amount of pixel to move marker horizontally using keyboard.\n            let stepX = WIDTH / 100;\n            // Amount of pixel to move marker vertically using keyboard.\n            let stepY = HEIGHT / 100;\n\n            x += (moveX[key] || 0) * stepX;\n            y += (moveY[key] || 0) * stepY;\n\n            // Make sure x and y don't go out of bounds.\n            x = x > WIDTH ? WIDTH : x < 0 ? 0 : x;\n            y = y > HEIGHT ? HEIGHT : y < 0 ? 0 : y;\n\n            // If the marker changes its position then calculate and set the color.\n            if (x !== markerX || y !== markerY) {\n                updateColor(x, y);\n            }\n        }\n    }\n\n\n    /**\n     * Updates palette's width and height values.\n     *\n     * @param {Object} bounds - Palette's Bounding rect.\n     */\n    const updateDimensions = bounds => {\n        ({ width: WIDTH, height: HEIGHT } = bounds || getBounds(el));\n    }\n\n    /**\n     * Bind events.\n     */\n    bindEvent(listeners, el, [MOUSE_DOWN, TOUCH_START], dragStart);\n    bindEvent(listeners, ROOT, [MOUSE_MOVE, TOUCH_MOVE], dragMove, { passive: false });\n    bindEvent(listeners, ROOT, [MOUSE_UP, TOUCH_END, TOUCH_CANCEL], dragEnd);\n    bindEvent(listeners, el, [FOCUS_OUT, FOCUS_IN], handleFocus);\n    bindEvent(listeners, el, KEY_DOWN, handleKeyboard);\n\n    return {\n        $: el,\n        marker,\n        update,\n        e: listeners\n    }\n}","import { createElement, getBounds } from \"../utils/dom\";\n\n\nconst MARKER_CLASSNAME = 'talwin__marker';\n\n/**\n * Palette's marker.\n *\n * @param {HTMLElement} parent - Element to append to.\n * @returns {Object}\n */\nexport const Marker = parent => {\n\n    /**\n     * Marker.\n     */\n    const el = createElement('', MARKER_CLASSNAME, parent);\n\n    /**\n     * Marker dimensions.\n     */\n    const { width, height } = getBounds(el);\n\n    /**\n     * Cache center X coordinate.\n     */\n    let centerX = width / 2;\n\n    /**\n     * Cache center Y coordinate.\n     */\n    let centerY = height / 2;\n\n    /**\n     * Marker X coordinate.\n     */\n    let markerX = 0;\n\n    /**\n     * Marker Y coordinate.\n     */\n    let markerY = 0;\n\n    /**\n     * Moves marker to the x, y coordinates.\n     *\n     * @param {Number} x - X coordinate.\n     * @param {Number} y - Y coordinate.\n     */\n    const moveTo = (x, y) => {\n        markerX = x;\n        markerY = y;\n        el.style.transform = `translate(${x - centerX}px, ${y - centerY}px)`;\n    }\n\n    /**\n     * Gets marker coordinates.\n     *\n     * @returns {Object}\n     */\n    const point = () => ({ x: markerX, y: markerY });\n\n\n    return {\n        $: el,\n        moveTo,\n        point\n    }\n}","import { BUTTON, BUTTON_CLASSNAME, CLICK, FOCUS_CLASSNAME, FOCUS_IN, FOCUS_OUT, MOUSE_LEAVE, SVG } from \"../constants\";\nimport { bindEvent } from \"../core/events/EventBinder\";\nimport { checkSVGAttrs, clipboardSVGAttrs } from \"../lib/svg\";\nimport { createElement, removeElement, setElementsHTML, setVisibility, updateClass } from \"../utils/dom\";\n\nconst PREVIEW_CLASSNAME = 'talwin__preview';\n\n/**\n * Preview component.\n *\n * @param {Element} parent - Element to append preview are to.\n * @param {Object} talwin - Instance.\n * @returns {Object}\n */\nexport const Preview = (parent, talwin) => {\n\n    /**\n     * Copy state.\n     */\n    let isCopied = false;\n\n    /**\n     * Preview area wrapper element.\n     */\n    const container = createElement('', 'tw-mr', parent);\n\n    /**\n     * Preview API.\n     */\n    const self = {\n        /**\n         * Preview events.\n         */\n        e: [],\n\n        /**\n         * Init. Preview, copy button.\n         *\n         * @param {Object} options - Picker options.\n         */\n        init(options) {\n            let { preview, copy } = options;\n            let previewArea = self.$;\n            let copyButton = self.cp;\n\n            // Either preview option is true and previewArea doen't exist,\n            // or preview option is false and previewArea does exist.\n            if (preview !== !!previewArea) {\n\n                previewArea = preview ? createElement('', PREVIEW_CLASSNAME, container) : removeElement(previewArea, true);\n    \n                if (copy && copyButton) {\n                    (previewArea || container).appendChild(copyButton);\n                }\n            }\n\n            if (! copy) {\n                copyButton = removeElement(copyButton, true);\n            } else if (! copyButton) {\n                copyButton = createElement(BUTTON, BUTTON_CLASSNAME, previewArea || container, { type: BUTTON }, thisButton => {\n                    updateSVG(thisButton);\n                });\n            }\n\n            // Hide container if both copyButton and previewArea don't exist,\n            setVisibility(container, copyButton || previewArea);\n\n            self.$ = previewArea;\n            self.cp = copyButton;\n        }\n    }\n\n\n    /**\n     * Sets a SVG icon for the copy button.\n     *\n     * @param {HTMLElement} button - Button.\n     */\n    const updateSVG = (button) => {\n        button = button || self.cp;\n        // Remove button content.\n        setElementsHTML(button);\n        createElement(SVG, '', button, isCopied ? checkSVGAttrs : clipboardSVGAttrs);\n    }\n\n    /**\n     * Copies selected color to the clipboard then updates copy,\n     * button's Icon and styles.\n     *\n     * @param {Event} e - Click or Focusin or Focusout or Mouseleave.\n     */\n    const copyColorAndUpdateView = e => {\n        if (self.cp && ! talwin.config.disabled) {\n            let type = e.type;\n            let isFocusIn = type === FOCUS_IN;\n\n            // On click copy color and update svg to display a Check icon.\n            if (! isCopied && type === CLICK) {\n                isCopied = talwin._clr.copy();\n                updateSVG();\n            }else {\n                // On focus add a focus class.\n                if (! isFocusIn) {\n                    // If the copy button lose focus or mouse leaves it,\n                    // then reset the svg to a Clipboard icon.\n                    if (isCopied) {\n                        isCopied = false;\n                        updateSVG();\n                    }\n                }\n\n                updateClass(self.cp, FOCUS_CLASSNAME, isFocusIn);\n            }\n        }\n    }\n\n    /**\n     * Events binding.\n     */\n    bindEvent(self.e, container, [CLICK, MOUSE_LEAVE, FOCUS_IN, FOCUS_OUT], copyColorAndUpdateView);\n\n    return self;\n}","import { CHANGE, COLOR, INPUT } from \"../constants\";\nimport { bindEvent } from \"../core/events/EventBinder\";\nimport { createElement, removeElement } from \"../utils/dom\";\n\n/**\n * Sliders component constants.\n */\nconst SLIDER_CLASSNAME = 'talwin__slider';\nconst HUE_SLIDER_CLASSNAME = SLIDER_CLASSNAME + ' ' + SLIDER_CLASSNAME + '--hue';\nconst ALPHA_SLIDER_CLASSNAME = SLIDER_CLASSNAME + ' ' + SLIDER_CLASSNAME + '--alpha'; \n\n/**\n * Picker sliders.\n *\n * @param {Element} parent - Element to append sliders to.\n * @param {Object} talwin - Talwin instance.\n * @returns {Object}\n */\nexport const Sliders = (parent, talwin) => {\n\n    /**\n     * Sliders wrapper element.\n     */\n    const container = createElement('', 'tw-w100', parent);\n\n    /**\n     * Color state updater.\n     */\n    const updateColor = talwin._clr.update;\n\n    /**\n     * Builds a slider.\n     *\n     * @param {String} className - Slider classname.\n     * @param {Number} max - Slider max value.\n     * @param {Number} step - Slider step.\n     * @returns {HTMLElement}\n     */\n    const build = (className, max, step) => \n         createElement(INPUT, className, container, { type: 'range', max, step });\n \n    /**\n     * Component API.\n     */\n    const self = {\n        /**\n         * Sliders events.\n         */\n        e: [],\n\n        hue: build(HUE_SLIDER_CLASSNAME, 360),\n        alpha: null,\n\n        /**\n         * Init. Sliders.\n         *\n         * @param {Object} options - New options.\n         */\n        init({ opacity }) {\n\n            let alpha = self.alpha;\n\n            if (opacity !== !!alpha) {\n                self.alpha = opacity ? build(ALPHA_SLIDER_CLASSNAME, 1, 0.01)\n                                     : removeElement(alpha, true) || updateColor({ a: 1 });\n            }\n        },\n\n        /**\n         * Sets sliders values.\n         *\n         * @param {Object} hsv - HSV color object.\n         */\n        val(hsv) {\n            let { alpha, hue } = self;\n            hue.value = 360 - hsv.h;\n            alpha && (alpha.value = hsv.a);\n        }\n    }\n\n    /**\n     * Handles changes in a slider value.\n     *\n     * @param {Event} e - Input or Change event.\n     */\n    const handleChange = e => {\n        let slider = e.target;\n        let value = slider.valueAsNumber;\n        let hsv = {};\n\n        if (slider === self.hue) {\n            hsv.h = 360 - value;\n        } else {\n            hsv.a = value;\n        }\n\n        updateColor(hsv);\n        // Either fire change or color event.\n        talwin._e.emit(e.type === CHANGE ? CHANGE : COLOR, slider);\n    }\n\n    /**\n     * Events binding.\n     */\n    bindEvent(self.e, container, [INPUT, CHANGE], handleChange);\n\n    return self;\n}","import { BUTTON, BUTTON_CLASSNAME, CHANGE, CLICK, COLOR, COLOR_FORMATS, ENTER, FOCUS_IN, HEX_FORMAT, INPUT, KEY_DOWN, max, SVG } from \"../constants\";\nimport { bindEvent } from \"../core/events/EventBinder\";\nimport { switchSVGAttrs } from \"../lib/svg\";\nimport { createElement, removeElement, setElementsHTML, setVisibility } from \"../utils/dom\";\nimport { objectIterator } from \"../utils/object\";\n\n/**\n * Inputs constants.\n */\nconst INPUTS_CLASSNAME = 'talwin__inputs';\nconst INPUT_CLASSNAME = 'talwin__input';\nconst LABEL_CLASSNAME = 'tw-label';\n\n/**\n * Inputs component.\n *\n * @param {Element} parent - Element to append the inputs container element to.\n * @param {Object} talwin - Talwin instance.\n * @returns {Object}\n */\nexport const Inputs = (parent, talwin) => {\n\n    /**\n     * Component API.\n     */\n    const self = {};\n\n    /**\n     * Inputs wrapper element.\n     */\n    let container;\n\n    /**\n     * Switch button.\n     * @type {Element}\n     */\n    let switchButton;\n\n    /**\n     * Picker formats.\n     */\n    let formats = [];\n\n    /**\n     * Index of the current format.\n     */\n    let formatIndex;\n\n    /**\n     * Array of inputs.\n     */\n    let inputList;\n\n    /**\n     * Event listeners.\n     */\n    let listeners = [];\n\n    const { config, _clr: colorState, _e: { emit } } = talwin;\n\n    /**\n     * Init. Inputs.\n     *\n     * @param {Object} options - Options.\n     */\n    self.init = (options) => {\n        let { inputs, format } = options;\n        let length;\n\n        // Get only valid formats.\n        formats = COLOR_FORMATS.filter(format => inputs[format]);\n        length = formats.length;\n\n        \n        if (! length) {\n            // No input, remove inputs.\n            container = removeElement(container, true);\n            switchButton = removeElement(switchButton, true);\n            // Normalize format value.\n            format = COLOR_FORMATS.includes(format) ? format : COLOR_FORMATS[0];\n        } else {\n\n            if (! container) {\n                container = createElement('', INPUTS_CLASSNAME, parent);\n            }\n\n            if (length === 1) {\n                switchButton = removeElement(switchButton, true);\n            } else if (!switchButton) {\n                // For more than one input format, add a switch button.\n                switchButton = createElement(BUTTON, BUTTON_CLASSNAME, parent, { type: BUTTON }, (thisButton) => {\n                    createElement(SVG, '', thisButton, switchSVGAttrs);\n                });\n            }\n\n            formatIndex = max(formats.indexOf(format), 0);\n            format = formats[formatIndex];\n        }\n\n        config.format = format;\n        build(format);\n        // Show/Hide parent container.\n        setVisibility(parent, length);\n    }\n\n    /**\n     * Build Inputs.\n     */\n    const build = (format) => {\n\n        self.$ = {};\n        inputList = [];\n\n        if (container) {\n            let { singleInput, opacity } = config;\n            // Each letter in the format variable represent a color channel,\n            // For multiple inputs, each color channel has an input field.\n            // e.g. for 'rgb' format fields array is [r, g, b] or [r, g, b, a] if opacity is true.\n            let fields = singleInput || format == HEX_FORMAT ? [format]\n                        : (format + (opacity ? 'a' : '')).split('');\n\n            // Empty the container from any inputs.\n            setElementsHTML(container);\n\n            fields.forEach((field, index) => {\n                /**\n                 * Create Input.\n                 * \n                 * <label class=\"sc-label\">\n                 *     <input type=\"text\" class=\"sc-picker__input\">\n                 *     <span>${field}</span>\n                 * </label>\n                 */\n                createElement('label', LABEL_CLASSNAME, container, false, (label => {\n                    self.$[field] = inputList[index] = createElement(INPUT, INPUT_CLASSNAME, label, { type: 'text' });\n                    createElement('span', '', label, { text: field });\n                }));\n            });\n\n            colorState.update({});\n        }\n    }\n\n    /**\n     * Handles changes in inputs.\n     *\n     * @param {Event} e - Input event.\n     */\n    const handleChange = e => {\n        let value = e.target.value;\n\n        if (value.trim()) {\n            let colorString = '';\n            let format = formats[formatIndex];\n            \n            if (config.singleInput || format === HEX_FORMAT) {\n                colorString = value;\n            } else {\n                // InputList has 3 or 4 inputs, Input for each color channel in the hsl and rgb,\n                // format, the reduce method adds comma between each input value.\n                // [30, 20, 10, 0.5] => '30,20,10,0.5'\n                colorString = format + '(' + inputList.reduce((string, currentInput) => (string && string + ',') + currentInput.value, '') + ')';\n            }\n\n            if (colorState.updateByString(colorString, self)) {\n                emit(COLOR, self.$);\n            }\n        }\n    }\n\n    /**\n     * Changes color format.\n     *\n     * @param {Event} e - Click event.\n     */\n    const changeFormat = e => {\n        if (e.target === switchButton) {\n            // Increment input format index, reset it if it reaches the end.\n            // this index will point to the next format.\n            formatIndex = (formatIndex + 1) % formats.length;\n            config.format = formats[formatIndex];\n            build(formats[formatIndex]);\n        }\n    }\n\n    /**\n     * Triggers change event when the color changes.\n     *\n     * @param {Event} e - Focusin or Change.\n     */\n    const triggerChangeEvent = e => {\n        if (e.type === FOCUS_IN) {\n            // Save color state, when inputs receive focus.\n            colorState.start();\n        } else {\n            // Trigger change event if color state is changed.\n            colorState.end(self.$);\n        }\n    }\n\n    /**\n     * Closes picker.\n     *\n     * @param {Event} e - Keydown.\n     */\n    const closePicker = e => {\n        if (e.key === ENTER) {\n            talwin.close();\n        }\n    }\n\n    /**\n     * Updates Input(s) value(s).\n     *\n     * @param {Object} color - Color object.\n     */\n    self.val = color => {\n        objectIterator(self.$, (input, key) => {\n            input.value = color[key];\n        });\n    }\n\n    /**\n     * Bind events.\n     */\n    bindEvent(listeners, parent, CLICK, changeFormat);\n    bindEvent(listeners, parent, INPUT, handleChange);\n    bindEvent(listeners, parent, [FOCUS_IN, CHANGE], triggerChangeEvent);\n    bindEvent(listeners, parent, KEY_DOWN, closePicker);\n\n    self.e = listeners;\n\n    return self;\n}","import { BUTTON, CLICK, COLOR_PROPERTY, int } from \"../constants\";\nimport { bindEvent } from \"../core/events/EventBinder\";\nimport { parseColor } from \"../lib/parser\";\nimport { createElement, getParent, removeElement, setCustomProperty, setElementsHTML, setVisibility } from \"../utils/dom\";\nimport { setColorAndTriggerEvents } from \"../utils/util\";\n\n/**\n * Swatches constants.\n */\nconst SWATCHES_CLASSNAME = 'talwin__swatches';\nconst SWATCHE_CLASSNAME = 'talwin__swatch';\n\n/**\n * Swatches component.\n *\n * @param {Element} parent - Element to append the palette element to.\n * @param {Object} talwin - Picker Instance.\n * @returns {Object}\n */\nexport const Swatches = (parent, talwin) => {\n\n    /**\n     * Buttons wrapper element.\n     */\n    let container = createElement('', SWATCHES_CLASSNAME, parent);\n\n    /**\n     * Swatches array.\n     */\n    let swatches;\n\n    /**\n     * Creates a swatch button.\n     *\n     * @param {String} color - Swatch Color.\n     * @returns {Element}\n     */\n    const createSwatchButton = color => createElement(BUTTON, SWATCHE_CLASSNAME, container, {\n            type: BUTTON,\n        }, button => { setCustomProperty(button, COLOR_PROPERTY, parseColor(color, true)) });\n\n    /**\n     * Swatches API.\n     */\n    const self = {\n        /**\n         * Swatches events.\n         */\n        e: [],\n\n        /**\n         * Initialize swatches.\n         *\n         * @param {Object} options - Talwin options.\n         */\n        init(options) {\n            let buttons = [];\n            swatches = options.swatches;\n    \n            setVisibility(container, swatches);\n            // Empty the container from all swatch buttons.\n            setElementsHTML(container);\n    \n            swatches.forEach((color, index) => {\n                buttons[index] = createSwatchButton(color);\n            });\n\n            self.$ = buttons;\n        },\n        /**\n         * Adds a swatch button.\n         *\n         * @param {String} color - Color.\n         */\n        add(color) {\n            let index = swatches.push(color) - 1;\n            self.$[index] = createSwatchButton(color);\n    \n            // If swatches array is empty, hide container.\n            setVisibility(container, swatches);\n        },\n        /**\n         * Removes a swatch button.\n         *\n         * @param {String|Number} swatch - Color or Swatch Index.\n         */\n        remove(swatch) {\n            let index = swatches.findIndex((color, index) => swatch === color || int(swatch) === index);\n            let swatchButtons = self.$;\n\n            if (index > -1) {\n                // Remove color from swatches array.\n                swatches.splice(index, 1);\n                // Remove swatch button.\n                removeElement(swatchButtons[index]);\n                swatchButtons.splice(index, 1);\n\n                // If swatches array is empty then hide the container.\n                setVisibility(container, swatches);\n            }\n        }\n    };\n\n    /**\n     * Sets color from a swatch button.\n     *\n     * @param {Event} e - Click.\n     */\n    const setColorFromSwatch = e => {\n        let target = e.target;\n\n        if (getParent(target) === container) {\n            setColorAndTriggerEvents(talwin, target.style.getPropertyValue('--' + COLOR_PROPERTY), target);\n        }\n    }\n\n    /**\n     * Bind events.\n     */\n    bindEvent(self.e, parent, CLICK, setColorFromSwatch);\n\n    return self;\n}","\nimport { getElement } from \"./utils/dom\";\nimport { merge, objectIterator } from \"./utils/object\";\nimport { defaults } from \"./defaults\";\nimport { createComponents, initialize } from \"./core\";\nimport '../sass/talwin.scss';\nimport { Color } from \"./core/color\";\nimport { boundNumber, isString, setColorAndTriggerEvents } from \"./utils/util\";\nimport { HEX_FORMAT, HSL_FORMAT, HSV_FORMAT, RGB_FORMAT } from \"./constants\";\nimport { HSVToHSL, HSVToRGB, RGBToHEX, toString } from \"./lib/colors\";\nimport { EventListener } from \"./core/events/EventListener\";\nimport { binder } from \"./core/events/EventBinder\";\n\n\nexport default class Talwin {\n\n    static version = VERSION;\n\n    /**\n     * Talwin defaults.\n     */\n    static defaults = defaults;\n\n    /**\n     * Talwin picker constructor.\n     *\n     * @param {String|Element} reference - The reference element.\n     * @param {Object} options - Options.\n     */\n    constructor(reference, options) {\n        reference = getElement(reference);\n        const talwin = this;\n        talwin.config = merge({}, Talwin.defaults, options);\n        talwin._e = EventListener(talwin);\n        talwin._clr = Color(talwin);\n        talwin._ui = createComponents(reference, talwin);\n        initialize(talwin, talwin.config);\n    }\n\n    /**\n     * Sets new options.\n     *\n     * @param {Object} options - Talwin options.\n     */\n    setOptions(options) {\n        initialize(this, options);\n    }\n\n    /**\n     * Gets the state of the picker whether it's opened or closed.\n     *\n     * @returns {Boolean}\n     */\n    isOpen() {\n        return this._ui.app.isOpen();\n    }\n\n    /**\n     * Opens the picker.\n     */\n    open() {\n        this._ui.app.open();\n    }\n\n    /**\n     * Closes the picker.\n     */\n    close() {\n        this._ui.app.close();\n    }\n\n    /**\n     * Toggles (opens/closes) the picker.\n     */\n    toggle() {\n        this._ui.app.toggle();\n    }\n\n    /**\n     * Attaches an event handler function for an event.\n     *\n     * @param {String} type - Event type.\n     * @param {CallableFunction} handler - Event handler.\n     */\n    on(type, handler) {\n        this._e.on(type, handler);\n    }\n\n    /**\n     * Detaches one or more event handlers.\n     *\n     * Note:\n     * omitting handler, remove all handlers from the event,\n     * omitting both event type and handler, remove all handlers that are,\n     * attached to all events.\n     *\n     * @param {String} type - Event type.\n     * @param {CallableFunction} handler - Event handler.\n     */\n    off(type, handler) {\n        this._e.off(type, handler);\n    }\n\n    /**\n     * Sets a color.\n     *\n     * @param {String|Object} color - Color.\n     */\n    setColor(color) {\n\n        let talwin = this;\n        let format;\n\n        if (! isString(color)) {\n            // Get color format from color object.\n            format = [RGB_FORMAT, HSL_FORMAT, HSV_FORMAT].find(format => format.split('')\n                                                                                   .every(channel => color[channel] && ! isNaN(color[channel])));\n            if (format) {\n                let a = color.a;\n                color.a = a != null ? a : 1;\n\n                if (format === HSV_FORMAT) {\n                    // Get current format.\n                    format = talwin.config.format;\n\n                    // H must be a value between 0 and 360.\n                    color.h = (color.h % 360 + 360) % 360;\n                    // S and V must be a value between 0 and 1.\n                    color.s = boundNumber(color.s) / 100;\n                    color.v = boundNumber(color.v) / 100;\n\n                    // Convert HSV to the selected color format.\n                    if (format === HSL_FORMAT) {\n                        color = HSVToHSL(color);\n                    } else {\n                        color = HSVToRGB(color);\n\n                        if (format === HEX_FORMAT) {\n                            color = RGBToHEX(color);\n                        }\n                    }\n                }\n                color = toString(color, format);\n            }\n        }\n\n        talwin._clr.updateByString(color, true);\n\n        return talwin;\n    }\n\n    /**\n     * Gets color.\n     *\n     * @returns {Object}\n     */\n    getColor() {\n        return this._clr.value;\n    }\n\n    /**\n     * Adds a swatch.\n     *\n     * @param {String} color - Color.\n     */\n    addSwatch(color) {\n        this._ui.swatches.add(color);\n    }\n\n    /**\n     * Removes a swatch.\n     *\n     * @param {String|Number} swatch - Can a color string or it's index in the swatches array.\n     */\n    removeSwatch(swatch) {\n        this._ui.swatches.remove(swatch);\n    }\n\n    /**\n     * Enables picker.\n     */\n    enable() {\n        this._ui.app.disable(false);\n    }\n\n    /**\n     * Disables picker.\n     */\n    disable() {\n        this._ui.app.disable(true);\n    }\n\n    /**\n     * Resets to default color.\n     */\n    reset() {\n        setColorAndTriggerEvents(this, this.config.default);\n    }\n\n    /**\n     * Repositions picker if it's displayed as a popover.\n     */\n    reposition() {\n        this._ui.app.reposition();\n    }\n\n    /**\n     * Executes all handlers attached to the specified event.\n     *\n     * @param {String} type - Event type.\n     */\n    trigger(type) {\n        this._e.emit(type);\n    }\n\n    /**\n     * Destroy picker and free up memory.\n     */\n    destroy() {\n\n        let talwin = this;\n        let components = talwin._ui;\n\n        // Initialize the reference element back.\n        components.ref.init({ preset: false, toggle: true });\n\n        // Remove all events.\n        objectIterator(components, components => {\n            components.e.forEach(listener => {\n                binder(listener, true);\n            });\n        });\n\n        // Remove all properties of this instance.\n        objectIterator(talwin, (value, key) => {\n            talwin[key] = null;\n        });\n    }\n}","import { CHANGE, CLOSE, COLOR, OPEN } from \"../../constants\";\nimport { objectIterator } from \"../../utils/object\";\n\n/**\n * Picker Events.\n *\n * @returns {Object}\n */\nexport const EventListener = (talwin) => {\n    const { config } = talwin;\n    /**\n     * Picker event listeners.\n     */\n    const listeners = {\n        [OPEN]: [],\n        [CLOSE]: [],\n        [CHANGE]: [],\n        [COLOR]: []\n    }\n\n    return {\n        /**\n         * Emits an event.\n         *\n         * @param {String} type - Event type.\n         * @param  {Element|Object} source - Event Source.\n         */\n        emit: (type, source) => {\n            if (! config.disabled && listeners[type]) {\n                listeners[type].forEach(handler => {\n                    if (type === COLOR || type === CHANGE) {\n                        handler(talwin._clr.value, source || talwin);\n                    } else {\n                        handler();\n                    }\n                });\n            }\n        },\n\n        /**\n         * Adds an event listener.\n         *\n         * @param {String} type - Event type.\n         * @param {CallableFunction} handler - Event handler.\n         */\n        on: (type, handler) => {\n            listeners[type] && listeners[type].push(handler);\n        },\n\n        /**\n         * Remove event listener(s).\n         *\n         * @param {String} type - Event type.\n         * @param {CallableFunction} handler - Event handler.\n         */\n        off: (type, handler) => {\n            let handlersArray = listeners[type];\n\n            if (handlersArray) {\n                // Remove the handler if it's specified,\n                // Remove all handlers of this event if handler is omitted.\n                listeners[type] = handler ? handlersArray.filter(attachedHandler => attachedHandler !== handler) : [];\n            } else if (type == null) {\n                objectIterator(listeners, (handlers, type) => {\n                    listeners[type] = [];\n                });\n            }\n        }\n    }\n}","import { BODY, CHANGE, COLOR_PROPERTY, HEX_FORMAT, HSL_FORMAT, HSV_FORMAT, INPUT, RGB_FORMAT, ROOT } from \"../constants\";\nimport { HSLToHSV, HSVToHSL, HSVToRGB, RGBToHEX, RGBToHSV, toString } from \"../lib/colors\";\nimport { parseColor } from \"../lib/parser\";\nimport { createElement, removeElement, setCustomProperty } from \"../utils/dom\";\nimport { isEqual, merge, objectIterator } from \"../utils/object\";\nimport { isset } from \"../utils/util\";\n\n/**\n * Color state.\n *\n * @param {Object} talwin - Talwin instance.\n * @returns {Object}\n */\nexport const Color = (talwin) => {\n\n    /**\n     * HSV color object.\n     */\n    let HSV = {\n        h: 0,\n        s: 0,\n        v: 0,\n        a: 1\n    }\n\n    /**\n     * RGB color object.\n     */\n    let RGB = HSVToRGB(HSV);\n\n    /**\n     * RGB string.\n     */\n    let rgbString = '';\n\n    /**\n     * Color object used for detecting a color change.\n     */\n    let colorStart;\n\n    \n    let { config, _e: event } = talwin;\n\n    /**\n     * Updates color and UI.\n     *\n     * @param {Object} newHSV - HSV color object.\n     * @param {Object|Boolean} updater - Exclude some components from updating.\n     * @param {Object} rgb - RGB color object.\n     */\n    const update = (newHSV, updater, rgb) => {\n        if (! config.disabled) {\n            merge(HSV, newHSV);\n            RGB = rgb || HSVToRGB(HSV);\n            rgbString = toString(RGB, RGB_FORMAT);\n    \n            let components = talwin._ui;\n            let { palette, sliders, inputs } = components;\n    \n            // Preview color.\n            setCustomProperty(components.preview.$, COLOR_PROPERTY, rgbString);\n            setCustomProperty(components.ref.$, COLOR_PROPERTY, rgbString);\n            // Change the gradient color stop of the alpha slider.\n            (updater || ! isset(newHSV.a)) && setCustomProperty(sliders.alpha, RGB_FORMAT, RGB.r + ',' + RGB.g + ',' + RGB.b);\n            // Set palette's hue.\n            isset(newHSV.h) && setCustomProperty(palette.$, 'hue', HSV.h);\n    \n            if (updater !== inputs) {\n                inputs.val(getColor('', config.singleInput));\n            }\n    \n            if (updater) {\n                sliders.val(HSV);\n                palette.update(HSV);\n            }\n        }\n    }\n\n    /**\n     * Gets color object.\n     *\n     * @param {String} format - Color format.\n     * @param {Boolean} asString - Get color as a string.\n     * @returns {Object}\n     */\n    const getColor = (format, asString) => {\n        format = format || config.format;\n\n        let isHex = format === HEX_FORMAT;\n        let color = isHex ? RGBToHEX(RGB)\n                : format === HSL_FORMAT ? HSVToHSL(HSV, !asString)\n                : RGB;\n\n        return asString || isHex ? { [format]: toString(color, format) } : color;\n    }\n\n\n    /**\n     * Updates color by a string instead of HSV object.\n     *\n     * @param {String} colorString - Color string.\n     * @param {Boolean|Object} updater - Exclude some components from updating.\n     */\n    const updateByString = (colorString, updater) => {\n\n        let { c: parsedColor, f: format } = parseColor(colorString);\n        let currentColor = getColor(format);\n        let isChanged = ! isEqual(parsedColor, currentColor);\n        let rgb, hsv;\n\n        if (isChanged) {\n\n            if (format === HSL_FORMAT) {\n                hsv = HSLToHSV(parsedColor);\n            } else {\n                rgb = parsedColor;\n                hsv = RGBToHSV(parsedColor);\n            }\n\n            update(hsv, updater, rgb);\n        }\n\n        return isChanged;\n    }\n\n    /**\n     * Copies color to the clipboard.\n     *\n     * @returns {Boolean}\n     */\n    const copy = () => objectIterator(getColor('', true), color => {\n\n            let clipboard = navigator.clipboard;\n\n            if (clipboard) {\n                clipboard.writeText(color);\n            } else {\n                // Incase browser doesn't support navigator.clipboard,\n                // Create a new input element and append it to the body,\n                // set its value as the color.\n                createElement(INPUT, '', BODY, null, input => {\n\n                    input.value = color;\n                    input.select();\n                    ROOT.execCommand('copy');\n\n                    // Color text is copied so remove the input.\n                    removeElement(input);\n                });\n            }\n        });\n\n    /**\n     * Outputs a color object.\n     *\n     * @param {Object} colorObject - RGB, HSL or HSV color object.\n     * @param {String} colorString - Color string.\n     * @param {String} format - Color format.\n     * @param {Boolean} asArray - Output color values in an array.\n     * @returns {Ojbect|Array}\n     */\n    const output = (colorObject, colorString, format, asArray) => {\n        if (config.opacity) {\n            format += 'a';\n        }\n\n        let output = asArray ? [] : {};\n\n        if (format !== HSV_FORMAT) {\n            output.toString = () => colorString || toString(colorObject, format);\n        }\n\n        /**\n         * This puts colorObject values in an object or an array.\n         *\n         * @param {Object|Array} color - The output color.\n         * @param {String} channel - Color channel.\n         * @param {index} index - Array index.\n         */\n        return format.split('').reduce((color, channel, index) => {\n\n            color[asArray ? index : channel] = colorObject[channel];\n\n            return color;\n\n        }, output);\n    }\n\n    /**\n     * Picker value.\n     */\n    const value = {\n        [HSV_FORMAT]: () => output(HSV, '', HSV_FORMAT, false),\n        [RGB_FORMAT]: asArray => output(RGB, rgbString, RGB_FORMAT, asArray),\n        [HSL_FORMAT]: asArray => output(HSVToHSL(HSV), '', HSL_FORMAT, asArray),\n        [HEX_FORMAT]: () => RGBToHEX(RGB)\n    }\n\n    /**\n     * Set color start.\n     */\n    const start = () => {\n        colorStart = getColor();\n    }\n\n    /**\n     * Triggers change event if colorStart doesn't equal to the current color.\n     *\n     * @param {Element} source - Element that changed color state.\n     */\n    const end = (source) => {\n        if (! isEqual(colorStart, getColor())) {\n            event.emit(CHANGE, source);\n        }\n    }\n\n    return {\n        value,\n        update,\n        updateByString,\n        copy,\n        start,\n        end,\n    }\n}"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","ROOT","document","BODY","body","HTML","documentElement","BUTTON","SVG","OPEN","CLOSE","COLOR","CLICK","MOUSE_DOWN","SCROLL","KEY_DOWN","INPUT","CHANGE","FOCUS_IN","FOCUS_OUT","HEX_FORMAT","RGB_FORMAT","HSL_FORMAT","HSV_FORMAT","FOCUS_CLASSNAME","BUTTON_CLASSNAME","COLOR_PROPERTY","REMOVE_METHOD","COLOR_FORMATS","max","min","round","Math","float","parseFloat","int","parseInt","objectIterator","object","fn","merge","target","sources","assign","isEqual","object1","object2","value","isString","isset","boundNumber","number","upperBound","lowerBound","setColorAndTriggerEvents","talwin","color","source","_clr","updateByString","emit","_e","getElement","ref","context","all","Element","createElement","tagName","className","parent","data","callback","ns","element","createElementNS","setElementsHTML","innerText","setAttributeNS","appendChild","getBounds","el","getBoundingClientRect","getParent","parentElement","replaceElement","newChild","oldChild","replaceChild","removeElement","destroy","removeChild","setCustomProperty","property","style","setProperty","setVisibility","cond","length","display","updateClass","classname","classList","html","innerHTML","defaults","id","theme","toggle","popover","position","margin","preset","default","disabled","format","singleInput","inputs","rgb","hex","hsl","opacity","preview","copy","swatches","binder","eventData","unbind","method","targetElement","events","handler","options","forEach","event","bindEvent","listeners","push","unbindEvent","filter","sides","top","right","bottom","left","alignments","start","center","end","staticAttrs","focusable","svgAttrs","width","height","viewBox","content","clipboardSVGAttrs","checkSVGAttrs","switchSVGAttrs","HSVToRGB","hsv","H","h","S","s","V","v","k","r","g","b","a","toString","colorString","comma","percent","toHex","hexNumber","RGBToHEX","HSVToHSL","percentage","l","ctx","getContext","HSL_REGEX","HEX_REGEX","parseColor","asString","trim","channels","match","angle","PI","maxAngle","slice","fillStyle","test","hexColor","split","map","c","f","createComponents","reference","createContainer","originalRef","$","e","init","type","cls","togglePicker","Reference","app","popper","config","colorState","_isOpen","scrollableAncestors","updatePopper","reposition","_ui","every","scrollable","isVisible","elTop","elBottom","scrollableTop","scrollableBottom","close","popperEvents","eventBinder","window","handlesAccessibility","elementToFocus","shiftKey","components","refElement","palette","contains","focusableElements","getLastFocusableElement","preventDefault","focus","update","open","silent","disable","state","targetReference","dataset","pop","refWidth","refHeight","refLeft","refTop","refBottom","refRight","refCenterX","refCenterY","popWidth","popHeight","popOffsetWidth","popOffsetHeight","docHeight","docWidth","side","alignment","popTop","popLeft","popStyle","hasSpaceForSides","hasSpaceForAlignment","isVertical","setSide","setAlignment","centerPopVertically","centerPopHorizontally","fallbacksPositions","setPosition","docBounds","clientHeight","positionSide","sidesArray","sideIsSet","alignmentIsSet","i","alignmentsArray","j","positionAlignment","scPop","scrollableElements","overflow","getComputedStyle","getScrollableAncestors","insertAdjacentElement","isOpen","App","tabindex","overlay","moveX","moveY","marker","centerX","centerY","markerX","markerY","moveTo","x","y","transform","point","Marker","WIDTH","HEIGHT","bounds","isDragging","updateColor","moveAndUpdateColor","touches","clientX","clientY","updateDimensions","passive","blur","Palette","container","isCopied","previewArea","copyButton","cp","thisButton","updateSVG","button","isFocusIn","Preview","sliders","build","step","hue","SLIDER_CLASSNAME","alpha","val","slider","valueAsNumber","Sliders","switchButton","formatIndex","inputList","formats","indexOf","includes","fields","field","index","label","text","input","reduce","string","currentInput","Inputs","createSwatchButton","buttons","add","remove","swatch","findIndex","swatchButtons","splice","getPropertyValue","Swatches","initialize","component","Talwin","VERSION","constructor","this","on","off","handlersArray","attachedHandler","handlers","EventListener","colorStart","HSV","RGB","rgbString","newHSV","updater","getColor","isHex","output","colorObject","asArray","channel","parsedColor","currentColor","isChanged","HSLToHSV","R","G","B","Cmax","range","saturation","RGBToHSV","clipboard","navigator","writeText","select","execCommand","Color","setOptions","setColor","find","isNaN","addSwatch","removeSwatch","enable","reset","trigger","listener"],"sourceRoot":""}